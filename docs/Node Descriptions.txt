#Dialogue Editor All Node Descriptions
######################################

!!! - these descriptions are what I thought might work for "nodes" (the building blocks of vgse). I realize now that these are too descriptive for our current planning. please don't bang your head against the wall trying to understand; they're just too descriptive. - !!!


"Below are all visual-scripting nodes split into three categories - Story, Dialogue, and Functional - based on their purposes." (Story is for Story Structure Data; Dialogue is for Dialogue Trees, and Functional are for coding.)


##Story Nodes
#############

Story nodes are nodes that help user figure out story.


###Plot Mountain

A "plot mountain" graph labeled with events from user's story. Designed to be used in plot organization.


###Passage

A passage on a specific topic.

**By default, it contains:**
- Title
- Image/3D object
- text

Text can be formatted with HTML/markdown.

Passages can be used in dialogue as text descriptions of characters, objects, etc; and their images/3D objects can be used as facial expressions in dialogue strings.


###History

A passage on a research topic.

The same thing as "Passage" node, but marked as history. This allows differentiation between user's research topics and text of in-game characters/objects. Will not appear on in-game lists/pockets.


### Thesis

Thesis w/ title. For user's viewing.


###Conflict

Description of conflict. For user's viewing.


###Event

Description of event. For user's viewing.


###Comment

Plain-text to help document node flow.


###Notes

HTML & markdown-formattable text on colored background. Allows for quick, unorganized notes, which user may desire to expand on later.


###Sources

A node to quickly/easily keep track of sources. Provides automatic formatting. ~ (Potentially.)



## Dialogue Nodes
#################

###Tag

A pointer. Makes nodes/chunks of dialogue easily grabbable for User.


##Start

Similar to Tag, pointer to first piece of dialogue in the story.
Should in-editor testing be implimented, would be used to get the first piece of dialogue for in-editor dialogue tester.


##StoryNode (Dialogue)

A container of dialogue to be printed on-screen.

**There are 4 parts to a Story Node:** ~
- Text
- Spirit (Optional) - indicator of "spirit" in which dialogue is told.
- Next Node(s)
- Before Functions
- After Functions


##Input

Container of dialogue, but with the intention that user will "input" text, rather than choosing a pre-set option. Paired with functional nodes/code, makes in-game parsing possible.


##Audio

A container of audio to be played when iterated over.

**Three parts are:**
- Audio file
- Markers
- Next Node(s)

Markers also contain four parts:
- choosen time
- caption
- spirit
- next

This allows for easy time-specific events during audio-dialogue. This could potentially be used for basic time-specific animations, mid-dialogue choices, or just captions.


## Option

A container of Option-Text, and an indicator of an in-game choice when placed after a node.



##End

A node representative of the end of all dialogue in a story.
Should in-editor testing be implimented, would be used to close in-editor dialogue tester.



## Functional Nodes
###################

~
Functional nodes are all based off of real ~ code structures ~ . The nodes are all designed to contain exactly the info used in the real code structures, function exactly the same, and to be built simply paired to the original code structure.
~


###Statement, Value, & Variables

Three functional nodes, statement, value, and variables, are visually smaller than the rest. They are not used as much to preform specific functions, as they are to (obviously) get values - in variable's case, from specific memory locations. These three nodes are used exclusively as code structures to be placed in larger functional nodes.


###Declare Variables

Functional node to declare variables. Declaring variables in a Declare Variables node means that the dialogue editor will keep track of your variables for you.

A secret second task of declare variables node is to set already-declared variables.


## Function & Call Functions

Function nodes define functions for the editor to keep track of. Functions can contain either dialogue, or functional nodes. They preform a task similar to tag nodes, except that they can take parameters, and may be a nice visual queue for programming-minded story writers.

Call Functions calls any amount of functions.


##If & Switch

If and Switch code structures.

Designed to be easy to use with dialogue.


##For & While

For & While code structures.

Designed to be easy to use with dialogue. All of these nodes have connection stubs in their bottom right corners; this is incase there is dialogue/code that needs to be run after the ~ story ~ down any branch is finished. Similar to the "after text" in the code snippet below:

'''
if ... :
	// "if" code
else:
	// "else" code

// After code


'''

##Class

Node for Class code structure.

-Unlike in other places, variables can be declared as Story nodes in a class.-


###Using

Adds a library to use to the current dialogue editor file.


##Code

Code Node for writing code, if you have non-visual code that you've written.

Code nodes can be used to convert non-visual code to visual-code, but they may also be useful for containing dense code that would be cumbersome if spread out.


##Print

Prints to console, much like the print function. (It was popular enough a node that I made it into it's own node.)